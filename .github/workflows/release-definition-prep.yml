# Release Definition Prep Workflow
# This GitHub Actions workflow is triggered manually. It prepares a release definition by creating a dedicated branch and generating the release configuration.
# It includes steps for setting up the environment, checking branch existence, branch management, generating the release configuration, and committing the changes.
# Notably, it includes steps to parse and clean the output log, then extract the release configuration into a 'release.yml' file.

name: Release Definition Prep

on:
  workflow_dispatch:
    inputs:
      configFile:
        description: 'Path to the config file'
        required: false
        default: 'release-definitions/config.yml'

jobs:
  create-branch-and-generate-release-definition:
    name: 'Prepare Release Definition'
    runs-on: ubuntu-latest
    container: ghcr.io/dxatscale/sfpowerscripts
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0 
          persist-credentials: true

      - name: Set up Git
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email '41898282+github-actions[bot]@users.noreply.github.com'
          git config --global --add safe.directory $GITHUB_WORKSPACE

      - name: Check if Release Definition Branch Exists
        id: check_branch
        run: |
          if git ls-remote --heads origin release-definition | grep -q 'refs/heads/release-definition'; then
            echo "Branch exists, deleting..."
            git push origin --delete release-definition
          else
            echo "Branch does not exist." 
          fi

      - name: Create Release Definition Branch
        run: |
          git branch release-definition origin/main
          git push origin release-definition

      - name: Checkout release-definition Branch
        run: |
          git fetch
          git checkout release-definition

      - name: Generate Release Definition and Create Log File
        run: |
          sfp releasedefinition:generate -n release -b release-definition -d release-definitions -f ${{ github.event.inputs.configFile }} -c main > release.log
          cat release.log
        env:
         NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Clean Log File and Extract Content
        run: |
          sed 's/\x1b\[[0-9;]*m//g' release.log > cleaned_release.log
          cat cleaned_release.log | sed -n '/release: release/,/workItemUrl: https:\/\/jira.apps.eop.gov\/browse/p' > release-definitions/release.yml
        
      #- name: Configure Git Safe Directory
      #  run: git config --global --add safe.directory $GITHUB_WORKSPACE
      
      - name: Commit and Push Changes to release-definition Branch
        run: |
          git config --global --add safe.directory $GITHUB_WORKSPACE
          git add release-definitions/*
          git commit -m "Add generated release definition file" || echo "No changes to commit"

       # Authenticate to npm
      - uses: actions/setup-node@v3
        with:
          registry-url: 'https://npm.pkg.github.com'

      - name: Fetch Artifacts
        run: |
          sfp artifacts:fetch -p release-definitions/release.yml --npm --scope ${{ github.repository_owner }}
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate Change Log
        run: |
          sfp changelog:generate -n release -w 'SFDC-[0-9]{3,10}' -b release-definition --directory release-definitions --workitemurl https://jira.apps.eop.gov/browse
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Add an empty commit to bypass the "[skip ci]" comment
      - name: Bypass "[skip ci]" with Empty Commit
        run: |
          git fetch
          git checkout release-definition
          git commit --allow-empty -m "Bypass [skip ci] with empty commit"
          git push origin release-definition

      

